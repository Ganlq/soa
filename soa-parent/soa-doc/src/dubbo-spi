1 dubbo spi 的
    目的：获取实现类的对象
    途径：ExtensionLoader.getExtension(String name)实现  （最后获取对象）

    实现路径有3个：
        * <T> ExtensionLoader<T> getExtensionLoader(Class<T> type)   为type new 一个 ExtensionLoader，
            然后缓存起来。
        * T getAdaptiveExtension() 获取一个扩展装饰类的对象，该类有一个规则，如果它没有一个@Adaptive就动态
            创建一个装饰类，例如Protocol$Adaptive对象
        * T getExtension(String name)  获取一个对象。



##dubbo 第一行代码com.alibaba.dubbo.container.Main.main(args);##

------------------ExtensionLoader.getExtensionLoader(Class<T> type)----------------------------
ExtensionLoader.getExtensionLoader(Container.class)
    -->this.type = type;
    -->objectFactory = (type == ExtensionFactory.class ? null : ExtensionLoader.getExtensionLoader(ExtensionFactory.class).getAdaptiveExtension());
        -->ExtensionLoader.getExtensionLoader(ExtensionFactory.class).getAdaptiveExtension()
            -->this.type = type;
            -->objectFactory = null;


执行以上代码完成了两个属性的初始化
 1. 每一个ExtensionLoader都包含了2个值 type 和 objectFactory
    Class<?> type ; //构造器 初始化时要得到的接口名
    ExtensionFactory objectFactory //构造器初始化的时候创建  AdaptiveExtensionFactory@7e086558 [SpiExtensionFactory,SpringExtensionFactory]
 2. new 一个ExtensionLoader 存储在 ConcurrentMap<Class<?>, ExtensionLoader<?>> EXTENSION_LOADERS


关于objectFactory的一些细节：
 1. objectFactory就是ExtensionFactory，它是通过ExtensionLoader.getExtensionLoader(ExtensionFactory.class)来实现的，但是它的objectFactory=null
 2. objectFactory的作用，它的作用就是为dubbo的IOC提供所用对象


 ===============================================================================================

 adaptive注解在类和方法上的区别：
 1 注解在类上：代表人工编码的，即实现了一个装饰器类，例如ExtensionFactory
 2 注解在方法上：代表自动生成和编码一个动态的adaptive类，例如：Protocol$Adaptive

 ————————————————————getAdaptiveExtension( )---------------------------------------------
ExtensionLoader.getAdaptiveExtension()//为 cachedAdaptiveInstance 赋值
    -->createAdaptiveExtension()
        -->getAdaptiveExtensionClass()
            -->getExtensionClasses()// 为cachedClasses 赋值
                -->loadExtensionClasses()//
                    -->loadFile(Map<String, Class<?>> extensionClasses, String dir) //加载配置文件信息
            -->createAdaptiveExtensionClass() // 自动生成和编码动态的adaptive类, 这个类是代理类
                -->createAdaptiveExtensionClassCode  //
                -->ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.compiler.Compiler.class).getAdaptiveExtension()
                -->compiler.compile(code, classLoader)
        -->injectExtension((T) getAdaptiveExtensionClass().newInstance())//作用：进入IOC的控制反转，实现动态注入




关于loadfile的一些细节
目的： 通过把配置文件META-INF/dubbo/internal/com.alibaba.dubbo.rpc.Protocol的内容，存储在缓存变量里面
cachedAdaptiveClass // 如果这个class含有Adaptive注解就赋值，例如ExtensionFactory里面就有，而加载Protocol这可环节就没有
cachedWrapperClasses // 只有该class不含有Adaptive注解且构造函数包含目标接口（type）类型，
                        例如protocol里面的spi就只有ProtocolFilterWrapper和ProtocolListenerWrapper能命中
cachedActivates //剩下的类中包含Activate注解
cachedNames // 剩下的类存储在这里






-----------------------getExtension(String name)
getExtension(String name) //指定对象缓存在cachedInstances；get出来的对象wrapper对象，例如protocol就是ProtocolFilterWrapper和ProtocolListenerWrapper其中一个。
  -->createExtension(String name)
    -->getExtensionClasses()
    -->injectExtension(T instance)//dubbo的IOC反转控制，就是从spi和spring里面提取对象赋值。
      -->objectFactory.getExtension(pt, property)
        -->SpiExtensionFactory.getExtension(type, name)
          -->ExtensionLoader.getExtensionLoader(type)
          -->loader.getAdaptiveExtension()
        -->SpringExtensionFactory.getExtension(type, name)
          -->context.getBean(name)
    -->injectExtension((T) wrapperClass.getConstructor(type).newInstance(instance))//AOP的简单设计







adaptive code template

package <扩展点接口所在包>;

public class <扩展点接口名>$Adpative implements <扩展点接口> {
    public <有@Adaptive注解的接口方法>(<方法参数>) {
        if(是否有URL类型方法参数?) 使用该URL参数
        else if(是否有方法类型上有URL属性) 使用该URL属性
        # <else 在加载扩展点生成自适应扩展点类时抛异常，即加载扩展点失败！>

        if(获取的URL == null) {
            throw new IllegalArgumentException("url == null");
        }

              根据@Adaptive注解上声明的Key的顺序，从URL获致Value，作为实际扩展点名。
               如URL没有Value，则使用缺省扩展点实现。如没有扩展点， throw new IllegalStateException("Fail to get extension");

               在扩展点实现调用该方法，并返回结果。
    }

    public <有@Adaptive注解的接口方法>(<方法参数>) {
        throw new UnsupportedOperationException("is not adaptive method!");
    }
}



为什么要设计adaptive？注解在类上和注解在方法上的区别？
adaptive设计的目的是为了识别固定已知类和扩展未知类。
1.注解在类上：代表人工实现，实现一个装饰类（设计模式中的装饰模式），它主要作用于固定已知类，
  目前整个系统只有2个，AdaptiveCompiler、AdaptiveExtensionFactory。
  a.为什么AdaptiveCompiler这个类是固定已知的？因为整个框架仅支持Javassist和JdkCompiler。
  b.为什么AdaptiveExtensionFactory这个类是固定已知的？因为整个框架仅支持2个objFactory,一个是spi,另一个是spring
2.注解在方法上：代表自动生成和编译一个动态的Adpative类，它主要是用于SPI，因为spi的类是不固定、未知的扩展类，所以设计了动态$Adaptive类.
例如 Protocol的spi类有 injvm dubbo registry filter listener等等 很多扩展未知类，
它设计了Protocol$Adaptive的类，通过ExtensionLoader.getExtensionLoader(Protocol.class).getExtension(spi类);来提取对象


为什么dubbo要自己设计一套SPI？
这是原始JDK spi的代码
	ServiceLoader<Command> serviceLoader=ServiceLoader.load(Command.class);
  for(Command command:serviceLoader){
      command.execute();
  }
dubbo在原来的基础上设计了以下功能
1.原始JDK spi不支持缓存；dubbo设计了缓存对象：spi的key与value 缓存在 cachedInstances对象里面，它是一个ConcurrentMap
2.原始JDK spi不支持默认值，dubbo设计默认值：@SPI("dubbo") 代表默认的spi对象，例如Protocol的@SPI("dubbo")就是 DubboProtocol，
  通过 ExtensionLoader.getExtensionLoader(Protocol.class).getDefaultExtension()那默认对象
3.jdk要用for循环判断对象，dubbo设计getExtension灵活方便，动态获取spi对象，
  例如 ExtensionLoader.getExtensionLoader(Protocol.class).getExtension(spi的key)来提取对象
4.原始JDK spi不支持 AOP功能，dubbo设计增加了AOP功能,在cachedWrapperClasses，在原始spi类，包装了XxxxFilterWrapper XxxxListenerWrapper
5.原始JDK spi不支持 IOC功能，dubbo设计增加了IOC,通过构造函数注入,代码为：wrapperClass.getConstructor(type).newInstance(instance),




